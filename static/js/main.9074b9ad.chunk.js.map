{"version":3,"sources":["FeedbackOptions.js","Statistics.js","Section.js","Feedback-Notification.js","App.js","index.js"],"names":["FeedbackOptions","onLeaveFeedback","type","name","onClick","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","message","App","state","handleAddFeedback","event","feedbackName","target","setState","prevState","props","step","countTotalFeedback","Object","values","reduce","acc","item","countPositiveFeedbackPercentage","goodVoices","totalVoices","percentageValue","Math","round","this","percentage","Component","defaultProps","ReactDOM","render","document","getElementById"],"mappings":"2NAqBmBA,EAlBI,SAAC,GAAD,IAAEC,EAAF,EAAEA,gBAAF,OACX,6BACI,4BAAQC,KAAO,SAASC,KAAK,OAAOC,QAASH,GAA7C,QAGA,4BAAQC,KAAO,SAASC,KAAK,UAAUC,QAASH,GAAhD,WAGA,4BAAQC,KAAO,SAASC,KAAK,MAAMC,QAASH,GAA5C,SCYDI,EArBE,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC1C,OACA,4BACI,sCAAYJ,GACZ,yCAAeC,GACf,qCAAWC,GACX,uCAAaC,GACb,mDAAyBC,KCQlBC,MAdf,YAAoC,IAAjBC,EAAgB,EAAhBA,MAAMC,EAAU,EAAVA,SACrB,OACI,iCACI,4BAAKD,GACJC,ICMEC,MAVf,YAAkC,IAAVC,EAAS,EAATA,QACpB,OACI,2BAAIA,ICCSC,E,4MAGbC,MAAQ,CAACX,KAAM,EAAGC,QAAS,EAAGC,IAAK,G,EAEvCU,kBAAoB,SAAAC,GAChB,IAAMC,EAAaD,EAAME,OAAOlB,KAChC,EAAKmB,UAAS,SAACC,EAAWC,GAAZ,sBACTJ,EAAeG,EAAUH,GAAeI,EAAMC,U,EAKvDC,mBAAqB,WAGjB,OAFeC,OAAOC,OAAO,EAAKX,OACRY,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAIC,IAAM,I,EAI7DC,gCAAkC,SAAAvB,GAC9B,IAAMwB,EAAa,EAAKhB,MAAMX,KACxB4B,EAAczB,EAChB0B,EAAkB,EAItB,OAHGF,GAA6B,IAAfC,KACbC,EAAkBC,KAAKC,MAAiB,IAAXJ,EAAeC,IAEzCC,G,uDAEF,IAAD,EACyBG,KAAKrB,MAA3BX,EADH,EACGA,KAAMC,EADT,EACSA,QAASC,EADlB,EACkBA,IAChBC,EAAQ6B,KAAKZ,qBACba,EAAaD,KAAKN,gCAAgCvB,GACxD,OACI,oCACI,kBAAC,EAAD,CAASG,MAAQ,yBACb,kBAAC,EAAD,CAAiBX,gBAAiBqC,KAAKpB,qBAE3C,kBAAC,EAAD,CAASN,MAAQ,cACJ,IAARH,EACD,kBAAC,EAAD,CAAcM,QAAU,sBAEpB,kBAAC,EAAD,CACAT,KAAQA,EACRC,QAAWA,EACXC,IAAOA,EACPC,MAASA,EACTC,mBAAsB6B,U,GA9CbC,aAAZxB,EAEVyB,aAAe,CAAChB,KAAK,GCFhCiB,IAASC,OAEL,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.9074b9ad.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions =({onLeaveFeedback}) =>(\r\n            <div>\r\n                <button type = \"button\" name=\"good\" onClick={onLeaveFeedback}>\r\n                    Good\r\n                </button>\r\n                <button type = \"button\" name=\"neutral\" onClick={onLeaveFeedback}>\r\n                    Neutral\r\n                </button>\r\n                <button type = \"button\" name=\"bad\" onClick={onLeaveFeedback}>\r\n                    Bad\r\n                </button>\r\n            </div>\r\n)\r\n\r\nFeedbackOptions.propTypes={\r\n    onLeaveFeedback:PropTypes.func.isRequired,\r\n    \r\n}\r\n    export default FeedbackOptions;","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nconst Statistics=({good, neutral, bad, total, positivePercentage})=>{\r\n    return(\r\n    <ul>\r\n        <li> Good: {good}</li>\r\n        <li> Neutral: {neutral}</li>\r\n        <li> Bad: {bad}</li>\r\n        <li> Total: {total}</li>\r\n        <li> Positive Feedback: {positivePercentage}</li>\r\n\r\n    </ul>\r\n    );\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: propTypes.number.isRequired,\r\n    neutral: propTypes.number.isRequired,\r\n    bad: propTypes.number.isRequired,\r\n    total: propTypes.number.isRequired,\r\n    positivePercentage: propTypes.number.isRequired,\r\n    \r\n}\r\nexport default Statistics;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Section ({title,children}){\r\n    return(\r\n        <section>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </section>\r\n    );\r\n}\r\n\r\nSection.propTypes = {\r\n    title:PropTypes.string,\r\n    children:PropTypes.object,\r\n}\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Notification ({message}){\r\n    return(\r\n        <p>{message}</p>\r\n    );\r\n}\r\n\r\nNotification.propTypes={\r\n    message:PropTypes.string,\r\n}\r\n\r\nexport default Notification;","import React, {Component} from 'react';\r\nimport FeedbackOptions from './FeedbackOptions';\r\nimport Statistics from './Statistics';\r\nimport Section from './Section';\r\nimport Notification from './Feedback-Notification';\r\n\r\nexport default class App extends Component{\r\n\r\n    static defaultProps = {step:1};  \r\n        state = {good: 0, neutral: 0, bad: 0}\r\n\r\n    handleAddFeedback = event =>{\r\n        const feedbackName=event.target.name;\r\n        this.setState((prevState, props)=>({\r\n            [feedbackName]: prevState[feedbackName] +props.step,\r\n        }))\r\n    }\r\n    \r\n\r\n    countTotalFeedback = ()=>{\r\n        const values = Object.values(this.state);\r\n        const totalValue = values.reduce((acc, item)=> acc+item, 0);\r\n        return totalValue;\r\n    }\r\n    \r\n    countPositiveFeedbackPercentage = total =>{\r\n        const goodVoices = this.state.good;\r\n        const totalVoices = total;\r\n        let percentageValue = 0;\r\n        if(goodVoices || totalVoices !==0){\r\n            percentageValue = Math.round(goodVoices*100/totalVoices);\r\n        }\r\n        return percentageValue;\r\n    }\r\n    render(){\r\n        const {good, neutral, bad} = this.state;\r\n        const total = this.countTotalFeedback();\r\n        const percentage = this.countPositiveFeedbackPercentage(total);\r\n        return(\r\n            <>\r\n                <Section title = \"Please leave feedback\">\r\n                    <FeedbackOptions onLeaveFeedback={this.handleAddFeedback}/>\r\n                </Section>\r\n                <Section title = \"statistics\">\r\n                    {total===0?(\r\n                    <Notification message = \"No feedback given\"/>\r\n                    ) : (\r\n                        <Statistics\r\n                        good = {good}\r\n                        neutral = {neutral}\r\n                        bad = {bad}\r\n                        total = {total}\r\n                        positivePercentage = {percentage}\r\n                        />\r\n                        )}\r\n                </Section>\r\n            </>    \r\n        );\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  \n    <App />, document.getElementById('root')\n);\n"],"sourceRoot":""}